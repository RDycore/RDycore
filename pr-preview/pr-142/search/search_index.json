{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Overview","text":"<p>RDycore is a performance-portable, GPU-capable river model used to study compound flooding, intended for use with the Department of Energy's Energy Exascale Earth System Model (E3SM).</p> <ul> <li>The Installation Guide shows you how to build and install   RDycore on your own machine or on a supported high-performance platform.</li> <li>The User Guide describes how to use RDycore in its standalone and   E3SM-integrated forms.</li> <li>The Developer Guide lays out some basic principles and   guidelines we use in developing RDycore.</li> </ul>"},{"location":"index.html#acknowledgements","title":"Acknowledgements","text":"<p>RDycore is funded by the US Department of Energy's (DOE) Scientific Discovery Through Advanced Computing (SciDAC) program through a joint parternship between the DOE Office of Science's Biological and Environmental Research and Advanced Scientific Computing Research programs.</p>"},{"location":"installation.html","title":"Installation","text":"<p>RDycore builds and runs on the following platforms:</p> <ul> <li>Linux and Mac laptops and workstations</li> <li>Frontier (Oak Ridge National Laboratory)</li> <li>Perlmutter (NERSC)</li> </ul>"},{"location":"installation.html#required-software","title":"Required Software","text":"<p>To build RDycore, you need:</p> <ul> <li>CMake v3.14+</li> <li>GNU Make</li> <li>reliable C, C++, and Fortran compilers</li> <li>a working MPI installation (like OpenMPI   or MPICH)</li> <li>PETSc (Git revision <code>b3128c15e0e</code>), built with   the following third-party libraries:<ul> <li>cgns</li> <li>exodusii</li> <li>fblaslapack</li> <li>hdf5</li> <li>libceed</li> <li>metis</li> <li>netcdf</li> <li>parmetis</li> <li>pnetcdf</li> <li>zlib</li> </ul> </li> </ul> <p>You can obtain all of these freely on the Linux and Mac platforms. On Linux, just use your favorite package manager. On a Mac, you can get the Clang C/C++ compiler by installing XCode, and then use a package manager like Homebrew or MacPorts to get the rest.</p>"},{"location":"installation.html#clone-the-repository","title":"Clone the Repository","text":"<p>First, go get the source code at GitHub:</p> SSHHTTPS <pre><code>git clone git@github.com:RDycore/RDycore.git\n</code></pre> <pre><code>git clone https://github.com/RDycore/RDycore.git\n</code></pre> <p>This places an <code>RDycore</code> folder into your current path.</p>"},{"location":"installation.html#configure-rdycore","title":"Configure RDycore","text":"<p>RDycore uses CMake, and can be easily configured as long as PETSc is installed and the <code>PETSC_DIR</code> and <code>PETSC_ARCH</code> environment variables are set properly. Usually all you need to do is change to your <code>RDycore</code> source directory and type</p> <pre><code>cmake -S . -B build\n</code></pre> <p>where <code>build</code> is the name of your build directory relative to the source directory. If you want to install RDycore somewhere afterward, e.g. to be able to configure E3SM to use it, you can set the prefix for the installation path using the <code>CMAKE_INSTALL_PREFIX</code> parameter:</p> <pre><code>cmake -S . -B build -DCMAKE_INSTALL_PREFIX=/path/to/install\n</code></pre>"},{"location":"installation.html#build-test-and-install-rdycore","title":"Build, Test, and Install RDycore","text":"<p>After you've configured RDycore, you can build it:</p> <ol> <li>From the build directory, type <code>make -j</code> to build the library.</li> <li>To run tests for the library (and the included drivers), type    <code>make test</code>.</li> <li>To install the model to the location (indicated by your <code>CMAKE_INSTALL_PREFIX</code>,    if you specified it), type <code>make install</code>. By default, products are installed    in the <code>include</code>, <code>lib</code>, <code>bin</code>, and <code>share</code> subdirectories of this prefix.</li> </ol>"},{"location":"installation.html#making-code-changes-and-rebuilding","title":"Making code changes and rebuilding","text":"<p>Notice that you must build RDycore in a  build tree, separate from its source trees. This is standard practice in CMake-based build systems, and it allows you to build several different configurations without leaving generated and compiled files all over your source directory. However, you might have to change the way you work in order to be productive in this kind of environment.</p> <p>When you make a code change, make sure you build from the build directory that you created in step 1 above:</p> <pre><code>cd /path/to/RDycore/build\nmake -j\n</code></pre> <p>You can also run tests from this build directory with <code>make test</code>.</p> <p>This is very different from how some people like to work. One method of making this easier is to use an editor in a dedicated window, and have another window open with a terminal, sitting in your <code>build</code> directory. If you're using a fancy modern editor, it might have a CMake-based workflow that handles all of this for you.</p> <p>The build directory has a structure that mirrors the source directory, and you can type <code>make</code> in any one of its subdirectories to do partial builds. In practice, though, it's safest to always build from the top of the build tree.</p>"},{"location":"developer/index.html","title":"RDycore Developer Guide","text":"<p>More to come!</p>"},{"location":"user/index.html","title":"RDycore User Guide","text":"<ul> <li>YAML input specification</li> </ul> <p>More soon!</p>"},{"location":"user/input.html","title":"RDycore YAML Input Specification","text":"<p>You can configure an RDycore simulation by creating a text file that uses the YAML markup language. Typically, these files have a <code>.yml</code> or <code>.yaml</code> suffix like <code>ex2b.yaml</code>. In this section, we describe how to express the specifics for your simulation using the YAML syntax.</p> <p>Before a YAML file is parsed, RDycore performs some string substitutions to allow certain parameters to be used, e.g. for setting the names of data files based on different build configurations. The following table lists the patterns that are replaced, and the substitutions that replace them.</p> Pattern Substitution <code>${PETSC_ID_TYPE}</code> <code>int32</code> or <code>int64</code> based on whether PETSc is built with 64-bit indices <p>RDycore's YAML input is broken up into several sections, each responsible for a different aspect of the desired simulation. These sections fall into several broad categories:</p> <ul> <li>Model equations and discretizations<ul> <li>physics: configures the different physical models   represented within RDycore</li> <li>numerics: specifies the numerical methods used   to solve the model equations</li> <li>grid: defines RDycore's discrete computational domain</li> <li>regions: associates regions (disjoint sets of cells)   defined in a grid file with human-readable names</li> <li>boundaries: associates boundaries (disjoint sets of   edges) defined in a grid file with human-readable names</li> <li>time: defines the timespan for the simulation, sets   limits and units for time stepping</li> </ul> </li> <li>Simulation diagnostics, output, and restarts<ul> <li>logging: controls informational messages logged to   files or to the terminal</li> <li>output: configures simulation output, including   scalable I/O formats and related parameters</li> <li>checkpoint: configures simulation checkpoint   files, which are used for restarts</li> <li>restart: configures whether a simulation is restarted   from a previously saved checkpoint file</li> </ul> </li> <li>Material properties<ul> <li>materials: defines the materials available to   the simulation</li> <li>surface_composition: associates   materials defined in the <code>materials</code> section with files in which the   relevant material properties are stored</li> </ul> </li> <li>Initial and boundary conditions, source terms<ul> <li>initial_conditions: associates initial   conditions (as defined in <code>flow_conditions</code>, <code>sediment_conditions</code>, and/or   <code>salinity_conditions</code>) with specific regions defined in the <code>regions</code>   section</li> <li>sources: associates source contributions   (as defined in <code>flow_conditions</code>, <code>sediment_conditions</code>, and/or   <code>salinity_conditions</code>) with specific regions defined in the <code>regions</code>   section</li> <li>boundary_conditions: associates boundary   conditions (as defined in <code>flow_conditions</code>, <code>sediment_conditions</code>, and/or   <code>salinity_conditions</code>) with specific boundaries defined in the   <code>boundaries</code> section</li> <li>flow_conditions: defines flow-related   parameters that can be used to specify initial/boundary conditions and   sources</li> <li>sediment_conditions: defines sediment-related   parameters that can be used to specify initial/boundary conditions and   sources</li> <li>salinity_conditions: defines salinity-related   parameters that can be used to specify initial/boundary conditions and   sources</li> </ul> </li> <li>Running Ensembles<ul> <li>ensemble: defines sets of parameters that vary   between ensemble members so RDycore can run several simulations at once</li> </ul> </li> </ul> <p>Each of these sections is described below, with a motivating example.</p>"},{"location":"user/input.html#boundaries","title":"<code>boundaries</code>","text":"<pre><code>boundaries:\n  - name: top_wall\n    grid_boundary_id: 2\n  - name: bottom_wall\n    grid_boundary_id: 3\n  - name: exterior\n    grid_boundary_id: 1\n</code></pre> <p>The <code>boundaries</code> section is a sequence (list) of boundary definitions, each of which contains the following parameters:</p> <ul> <li><code>name</code>: a human-readable name for the boundary</li> <li><code>grid_boundary_id</code>: an integer identifier associated with a disjoint set of   grid edges. If this identifier is not found within the grid file specified   in the <code>grid</code> section, a fatal error occurs.</li> </ul> <p>Boundary definitions can appear in any order within the sequence. The <code>boundaries</code> section is optional, and need not be specified if you don't need to associate a specific boundary condition with a specific boundary.</p>"},{"location":"user/input.html#boundary_conditions","title":"<code>boundary_conditions</code>","text":"<pre><code>boundary_conditions:\n  - boundaries: [top_wall]\n    flow: reflecting_bc\n  - boundaries: [bottom_wall]\n    flow: outflow_bc\n</code></pre> <p>The <code>boundary_conditions</code> section is a sequence (list) associating <code>flow</code>, <code>sediment</code>, and <code>salinity</code> conditions (as defined in their respective sections) with boundaries (as defined in the <code>boundaries</code> section). A boundary can have at most one set of boundary conditions associated with it, but a boundary condition can be associated with multiple boundaries, as indicated by the <code>boundaries</code> field, which accepts a list of boundary names. If no boundary conditions are given for a specific boundary, that boundary is assigned an automatically-generated reflecting boundary condition and homogeneous Neumann sediment and salinity conditions.</p> <p>The above example shows a valid configuration for a simulation in which sediments and salinity are not modeled, so only the <code>flow</code> parameter is required. The presence of sediment boundary concentrations requires the <code>sediment</code> parameter, as the presence of salinity concentrations requires the <code>salinity</code> parameter.</p> <p>Like the <code>boundaries</code> section, the <code>boundary_conditions</code> section is optional. If no boundary conditions are specified, all boundaries are assumed to have a reflecting boundary condition.</p>"},{"location":"user/input.html#checkpoint","title":"<code>checkpoint</code>","text":"<pre><code>checkpoint:\n  format: hdf5\n  interval: 100\n</code></pre> <p>The <code>checkpoint</code> section contains fields that specify whether and how RDycore writes checkpoint files, which can be used to restart simulations using parameters in the <code>restart</code> section.</p> <ul> <li><code>format</code>: the format of the checkpoint files to be written. This can be either   <code>binary</code> (the default) or <code>hdf5</code>.</li> <li><code>interval</code>: the number of time steps taken between writing checkpoint files.   This must be a positive integer.</li> <li><code>prefix</code>: an optional prefix for checkpoint files. If omitted, the prefix for   checkpoint files is the prefix of the YAML input file name for the simulation.</li> </ul> <p>The name of a checkpoint file written at time step <code>N</code> is <code>&lt;prefix&gt;.rdycore.r.&lt;N&gt;.&lt;format&gt;</code>, where <code>&lt;prefix&gt;</code> is the checkpoint prefix and <code>&lt;format&gt;</code> is <code>bin</code> for a binary file and <code>h5</code> for an HDF5 file.</p> <p>This section is optional. If omitted, no checkpoint files are written.</p>"},{"location":"user/input.html#ensemble","title":"<code>ensemble</code>","text":"<pre><code>ensemble:\n  size: 3\n  members:\n  - name: member0\n    materials:\n    - name: smooth\n      properties:\n        manning:\n          value: 0.15\n  - name: member1\n    materials:\n    - name: smooth\n      properties:\n        manning:\n          value: 0.20\n  - name: member2\n    materials:\n    - name: smooth\n      properties:\n        manning:\n          value: 0.25\n    flow_conditions:\n    - name: domain_flow_ic\n      type: dirichlet\n      file: Differnt.Houston1km.ic.${PETSC_ID_TYPE}.bin\n      format: binary\n</code></pre> <p>The <code>ensemble</code> section defines parameter sets used to construct an ensemble of simulations with different parameters.</p> <p>Currently, this section lists all ensemble members, each with specific parameters overridden. This explicit approach to constructing ensembles allows the parameter sampling procedure to be performed by external tools. Here are the fields of the <code>ensemble</code> section:</p> <ul> <li><code>size</code>: the number of ensemble members. This parameter is redundant in the   sense that the number of ensemble members can be determined by the <code>members</code>   field (below), but RDycore throws an error if the actual number of members   does not match this parameter.</li> <li><code>members</code>: a list of ensemble members, specified using YAML's sequence syntax   (<code>-</code>). An ensemble member is just a collection of sections containing   overridden parameters. An optional <code>name</code> field provides a name for each   ensemble member; if omitted, the ensemble is automatically named in   relation to its index within the list of members.</li> </ul> <p>Use the syntax (<code>-</code>) to add a member to the ensemble's <code>members</code> field. The member consists of a set of sections with specific overridden parameters. Sections that can be overridden in an ensemble member are:</p> <ul> <li><code>grid</code></li> <li><code>materials</code></li> <li><code>flow_conditions</code></li> <li><code>sediment_conditions</code></li> <li><code>salinity_conditions</code></li> </ul> <p>The example above redefines the Manning coefficient of the <code>smooth</code> material defined elsewhere in the file. In plain language, the example varies the smoothness of the <code>smooth</code> material between ensemble members. Additionally, the file used to initialize the <code>domain_flow_ic</code> condition is overridden for the third member (<code>member2</code>).</p> <p>This syntax is a bit cumbersome for assembling ensembles by hand, but it's a simple mechanism for overriding parameters within ensemble members without creating any new syntax for simulation input.</p>"},{"location":"user/input.html#flow_conditions","title":"<code>flow_conditions</code>","text":"<pre><code>flow_conditions:\n  - name: dam_top_ic\n    type: dirichlet\n    height: 10\n    momentum: [0, 0]\n  - name: dam_bottom_ic\n    type: dirichlet\n    file: dam_ics.dat\n    format: binary\n  - name: reflecting_bc\n    type: reflecting\n  - name: outflow_bc\n    type: critical-outflow\n</code></pre> <p>The <code>flow_conditions</code> section contains a sequence of sets of parameters defining flow within a cell or cell boundary (edge). These flow conditions can be used to define initial conditions, source contributions, and boundary conditions elsewhere in the file. The parameters that define a flow condition are</p> <ul> <li><code>name</code>: a human-readable name that can be used to refer to this flow condition</li> <li><code>type</code>: the type of constraint applied by this flow condition. Available   options are<ul> <li><code>dirichlet</code>: the condition explicitly specifies the value of relevant   flow variables. This is useful for Dirichlet boundary conditions,   initial conditions, and source terms.</li> <li><code>neumann</code>: the condition explicitly specifies the value of the directional   derivative of relevant flow variables on cell boundaries. This is useful   only for boundary conditions. Currently, only homogeneous Neumann conditions   are supported.</li> <li><code>reflecting</code>: the condition specifies that no flow occurs through a given   boundary, and that the boundary reflects the momentum contained in the flow.   Useful only for boundary conditions.</li> <li><code>critical-outflow</code>: the condition specifies that flow through a boundary   is defined by a critical outflow condition. Useful only for boundary   conditions.</li> </ul> </li> </ul> <p>In the case of a Dirichlet condition, flow is prescribed by providing parameters to set the water height and momentum. This can be done in one of two ways:</p> <ol> <li> <p>By specifying the parameters directly using the following fields:</p> <ul> <li><code>height</code>: the height of water [m] at the relevant point (within a cell   or on its boundary)</li> <li><code>momentum</code>: a 2-component sequence/list containing the <code>x</code> and <code>y</code> components   of the momentum [kg m/s] at the relevant point (within a cell or on its   boundary)</li> </ul> </li> <li> <p>By specifying a file from which data for these parameters is to be read. The    data is read into the components of the solution vector that correspond    to the cells belonging to the region to which this flow condition is    assigned:</p> </li> <li> <p><code>file</code>: the path for the file from which data is read, specified relative      to the directory in which the RDycore executable was run.</p> </li> <li><code>format</code>: the format of the data in the file, which current must be      <code>binary</code> (specifying PETSc's binary format).</li> </ol>"},{"location":"user/input.html#grid","title":"<code>grid</code>","text":"<pre><code>grid:\n  file: breaking-dam.exo\n</code></pre> <p>The <code>grid</code> section defines the computational domain used by RDycore. Currently, has only a single parameter:</p> <ul> <li><code>file</code>: the file containing the grid representing the computational domain.   This grid must be stored in a format supported by PETSc's DMPlex   data structure.</li> </ul>"},{"location":"user/input.html#initial_conditions","title":"<code>initial_conditions</code>","text":"<pre><code>initial_conditions:\n  - region: upstream\n    flow: dam_top_ic\n  - region: downstream\n    flow: dam_bottom_ic\n</code></pre> <p>The <code>initial_conditions</code> section is a sequence (list) associating <code>flow</code>, <code>sediment</code>, and <code>salinity</code> conditions (as defined in their respective sections) with regions (as defined in the <code>regions</code> section). A region must have exactly one set of initial conditions associated with it. The above example shows a valid configuration for a simulation in which sediments and salinity are not modeled, so only the <code>flow</code> parameter is required. The presence of sediment concentrations requires the <code>sediment</code> parameter, as the presence of salinity concentrations requires the <code>salinity</code> parameter.</p>"},{"location":"user/input.html#logging","title":"<code>logging</code>","text":"<pre><code>logging:\n  file: rdycore.log\n  level: info\n</code></pre> <p>The <code>logging</code> section controls how messages emitted by RDycore are logged. The relevant parameters in this section are</p> <ul> <li><code>file</code>: the file to which logged messages are written, relative to the   directory in which RDycore (coupled or uncoupled) is executed. If this   parameter is omitted, logged messages are written to standard output.</li> <li><code>level</code>: the desired level of detail that determines which messages are   logged. Available options are<ul> <li><code>none</code>: no messages are logged</li> <li><code>warning</code>: only warnings/urgent messages are logged</li> <li><code>info</code>: warnings and informational messages are logged</li> <li><code>detail</code>: warnings, informational messages, and messages with some   degree of technical detail are logged</li> <li><code>debug</code>: all messages including debugging prints are logged</li> </ul> </li> </ul>"},{"location":"user/input.html#materials","title":"<code>materials</code>","text":"<pre><code>materials:\n  - name: smooth\n    properties:\n      manning:\n        value: 0.15\n  - name: rough\n    properties:\n      manning:\n        file: rough-manning.dat\n        format: binary\n</code></pre> <p>The <code>materials</code> section is a sequence (list) of named materials defined by specific material properties. Each material is essentially a named list of material properties specified either directly by value or by data in a specific file with a specific format. A material itself is specified by the following fields:</p> <ul> <li><code>name</code>: a human-readable name that can be used to refer to a material</li> <li><code>properties</code>: a mapping of material properties, with property names   mapped to one or more of the following fields:<ul> <li><code>value</code>: the value of the material property (omitted when <code>file</code> is specified)</li> <li><code>file</code>: the name of a file from which the property is to be read (omitted when <code>value</code> is specified)</li> <li><code>format</code>: the format of the specified file (if any)</li> </ul> </li> </ul> <p>Valid material properties are:</p> <ul> <li><code>manning</code> (required): the value of the Manning roughness coefficient   for the material</li> </ul>"},{"location":"user/input.html#numerics","title":"<code>numerics</code>","text":"<pre><code>numerics:\n  spatial: fv\n  temporal: euler\n  riemann: roe\n</code></pre> <p>The <code>numerics</code> section defines the spatial and temporal discretizations used by RDycore. The parameters that define these discretizations are</p> <ul> <li><code>spatial</code>: determines the spatial discretization. Can be either <code>fv</code> for   a finite volume method, or <code>fe</code> for a finite element method. Currently, only   <code>fv</code> is implemented. Default value: <code>fv</code></li> <li><code>temporal</code>: determines the method of time integration used. Can be <code>euler</code>   for the forward Euler method, <code>rk4</code> for a 4th-order Runge-Kutta method, or   <code>beuler</code> for the L-stable backward Euler method. Currently, only <code>euler</code> and   <code>rk4</code> are supported. Default value: <code>euler</code></li> <li><code>riemann</code>: determines the form of the Riemann solver used for the shallow   water equations. Can be <code>roe</code> for the Roe solver or <code>hllc</code> for the HLLC solver.   Currently, only <code>roe</code> is implemented. Default value: <code>roe</code></li> </ul>"},{"location":"user/input.html#output","title":"<code>output</code>","text":"<pre><code>output:\n  format: xdmf\n  interval: 100\n  batch_size: 1\n  time_series:\n    boundary_fluxes: 10\n</code></pre> <p>The <code>output</code> section control simulation output, including visualization and time series data (and excluding checkpoint data). Relevant parameters are</p> <ul> <li><code>format</code>: the format of the output written. Available options are<ul> <li><code>none</code>: no output is written. This is the default value.</li> <li><code>binary</code>: output is written using PETSc's binary data format</li> <li><code>xdmf</code>: output is written to the XDMF format</li> <li><code>cgns</code>: output is written to the CFD General Notation System (CGNS) format</li> </ul> </li> <li><code>interval</code>: the number of time steps between output dumps. Default value: 0 (no output)</li> <li><code>batch_size</code>: the number of time steps for which output data is stored in a   single file. For example, a batch size of 10 specifies that each individual   output file stores data for 10 time steps. Default value: 1</li> <li><code>time_series</code>: this subsection controls time series simulation output, which   is useful for inspection and possibly even coupling. Currently, this subsection   has only one parameter:<ul> <li><code>boundary_fluxes</code>: the interval (number of timesteps) at which boundary   flux data is appended to a tab-delimited text file</li> </ul> </li> </ul>"},{"location":"user/input.html#physics","title":"<code>physics</code>","text":"<pre><code>physics:\n  flow:\n    mode: swe\n    bed_friction: false\n    tiny: 1e-7\n  sediment: false\n  salinity: false\n</code></pre> <p>The <code>physics</code> section determines which model physics are active in RDycore. There are three available physical models.</p> <p>First is the flow model, which is configured in the <code>flow</code> subsection. This model determines how flooding is represented within RDycore. The relevant parameters in this subsection are:</p> <ul> <li><code>mode</code>, which determines how the height of floodwater is computed. Valid    parameters are <code>swe</code> (shallow water equations)    and <code>diffusive</code> (diffusive wave approximation,    not yet supported). This parameter is required and has no default value.</li> <li><code>bed_friction</code>, which can be set to <code>true</code> or <code>false</code> to enable/disable   riverbed friction. Default value: <code>false</code></li> <li><code>tiny_h</code>, which is the water height below which a given point is assumed to   be dry. Default value: <code>1e-7</code></li> </ul> <p>The second physical model is the sediment model. You can enable or disable this by setting the <code>sediment</code> parameter to <code>true</code> or <code>false</code>.</p> <p>The third physical model is the salinity model, which you can also enable or disable this by setting the <code>salinity</code> parameter to <code>true</code> or <code>false</code>.</p>"},{"location":"user/input.html#regions","title":"<code>regions</code>","text":"<pre><code>regions:\n  - name: upstream\n    grid_region_id: 2\n  - name: downstream\n    grid_region_id: 1\n</code></pre> <p>The <code>regions</code> section is a sequence (list) of regions definitions, each of which contains the following parameters:</p> <ul> <li><code>name</code>: a human-readable name for the boundary</li> <li><code>grid_region_id</code>: an integer identifier associated with a disjoint set of   grid cells. If this identifier is not found within the grid file specified   in the <code>grid</code> section, a fatal error occurs.</li> </ul> <p>Region definitions can appear in any order within the sequence.</p>"},{"location":"user/input.html#restart","title":"<code>restart</code>","text":"<pre><code>restart:\n  file: checkpoint-100.h5\n  reinitialize: true\n</code></pre> <p>The <code>restart</code> section allows a user to specify a checkpoint file from which a simulation is restarted.</p> <ul> <li><code>file</code>: the name of the checkpoint file from which to restart the simulation</li> <li><code>reinitialize</code>: a flag indicating whether to reinitialize the simulation time   to 0 (<code>true</code>) or continue from the time at which the checkpoint file was   written (<code>false</code>)</li> </ul>"},{"location":"user/input.html#salinity_conditions","title":"<code>salinity_conditions</code>","text":"<pre><code>salinity_conditions:\n  - name: my-sal-condition\n    type: dirichlet\n    concentration: 1\n</code></pre> <p>The <code>salinity_conditions</code> section contains a sequence of sets of parameters defining the salinity concentration within a cell or cell boundary (edge). A salinity condition can be used to define initial conditions, source contributions, and boundary conditions elsewhere in the file. The parameters that define a salinity condition are</p> <ul> <li><code>name</code>: a human-readable name that can be used to refer to the salinity condition</li> <li><code>type</code>: the type of constraint applied by this salinity condition. Available   options are<ul> <li><code>dirichlet</code>: the condition explicitly specifies the value of the   salinity concentration. This is useful for Dirichlet boundary conditions,   initial conditions, and source terms.</li> <li><code>neumann</code>: the condition explicitly specifies the value of the directional   derivative of the concentration on cell boundaries. This is useful   only for boundary conditions. Currently, only homogeneous Neumann conditions   are supported.</li> </ul> </li> </ul> <p>In the case of a Dirichlet condition, a salinity concentration is prescribed by providing one or more parameters. This can be done in one of two ways:</p> <ol> <li> <p>By specifying the concentration directly using the <code>concentration</code> parameter</p> </li> <li> <p>By specifying a file from which concentration data is to be read. The    data is read into the components of the solution vector that correspond    to the cells belonging to the region to which this flow condition is    assigned:</p> </li> <li> <p><code>file</code>: the path for the file from which data is read, specified relative      to the directory in which the RDycore executable was run.</p> </li> <li><code>format</code>: the format of the data in the file, which current must be      <code>binary</code> (specifying PETSc's binary format).</li> </ol>"},{"location":"user/input.html#sediment_conditions","title":"<code>sediment_conditions</code>","text":"<pre><code>sediment_conditions:\n  - name: my-sed-condition\n    type: dirichlet\n    concentration: 1\n</code></pre> <p>The <code>sediment_conditions</code> section contains a sequence of sets of parameters defining the sediment concentration within a cell or cell boundary (edge). A sediment condition can be used to define initial conditions, source contributions, and boundary conditions elsewhere in the file. The parameters that define a sediment condition are</p> <ul> <li><code>name</code>: a human-readable name that can be used to refer to the sediment condition</li> <li><code>type</code>: the type of constraint applied by this sediment condition. Available   options are<ul> <li><code>dirichlet</code>: the condition explicitly specifies the value of the   sediment concentration. This is useful for Dirichlet boundary conditions,   initial conditions, and source terms.</li> <li><code>neumann</code>: the condition explicitly specifies the value of the directional   derivative of the sediment concentration on cell boundaries. This is   useful only for boundary conditions. Currently, only homogeneous Neumann   conditions are supported.</li> </ul> </li> </ul> <p>In the case of a Dirichlet condition, a sediment concentration is prescribed by providing one or more parameters. This can be done in one of two ways:</p> <ol> <li> <p>By specifying the concentration directly using the <code>concentration</code> parameter</p> </li> <li> <p>By specifying a file from which concentration data is to be read. The    data is read into the components of the solution vector that correspond    to the cells belonging to the region to which this flow condition is    assigned:</p> </li> <li> <p><code>file</code>: the path for the file from which data is read, specified relative      to the directory in which the RDycore executable was run.</p> </li> <li><code>format</code>: the format of the data in the file, which current must be      <code>binary</code> (specifying PETSc's binary format).</li> </ol>"},{"location":"user/input.html#sources","title":"<code>sources</code>","text":"<pre><code>sources:\n  - region: upstream\n    flow: dam_top_src\n  - region: downstream\n    flow: dam_bottom_src\n</code></pre> <p>The <code>sources</code> section is a sequence (list) associating <code>flow</code>, <code>sediment</code>, and <code>salinity</code> sources (as defined in their respective sections) with regions (as defined in the <code>regions</code> section). Sources are optional for each region--if omitted, a region has no source contributions. A region may have no more than one set of source conditions associated with it. The above example shows a valid configuration for a simulation in which sediments and salinity are not modeled, so only the <code>flow</code> parameter is required. The presence of sediment sources requires the <code>sediment</code> parameter, as the presence of salinity sources requires the <code>salinity</code> parameter.</p>"},{"location":"user/input.html#surface_composition","title":"<code>surface_composition</code>","text":"<pre><code>surface_composition:\n  - region: upstream\n    material: smooth\n  - region: downstream\n    material: rough\n</code></pre> <p>The <code>surface_composition</code> section is a sequence (list) associating materials (as defined in the <code>materials</code> section) with regions (as defined in the <code>regions</code> section). Since regions and materials both have human-readable names, the association between the two is made clear by the <code>region</code> and <code>material</code> parameters in each entry. A region is understood to be completely filled with the material with which it is associated--the relationship between regions and materials is necessarily 1:1.</p>"},{"location":"user/input.html#time","title":"<code>time</code>","text":"<pre><code>time:\n  final_time: 1\n    unit: years\n    max_step: 1000\n    time_step: 0.001\n    coupling_interval: 0.01\n</code></pre> <p>The <code>time</code> section determines the time-stepping strategy used by RDycore using the following parameters:</p> <ul> <li><code>units</code>: the units in which time is expressed in the input file. Available   options are <code>seconds</code>, <code>minutes</code>, <code>hours</code>, <code>days</code>, <code>months</code>, and <code>years</code>.   This parameter is required and has no default value.</li> <li><code>final_time</code>: the time at which the simulation ends (in the desired units)</li> <li><code>max_step</code>: the number of steps after which the simulation ends</li> <li><code>time_step</code>: a fixed size used for the time step in the desired units.</li> <li><code>coupling_inverval</code>: the time interval (in the desired units) at which   RDycore advances without coupling to E3SM. By default, RDycore runs a single   time step without coupling to E3SM.</li> </ul> <p>Exactly two of <code>final_time</code>, <code>max_step</code>, and <code>time_step</code> must be specified. The missing parameter is then computed from those parameters given.</p>"}]}