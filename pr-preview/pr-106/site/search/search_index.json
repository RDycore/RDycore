{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Overview","text":"<p>RDycore is a performance-portable, GPU-capable river model used to study compound flooding, intended for use with the Department of Energy's Energy Exascale Earth System Model (E3SM).</p> <ul> <li>The Installation Guide shows you how to build and install   RDycore on your own machine or on a supported high-performance platform.</li> <li>The User Guide describes how to use RDycore in its standalone and   E3SM-integrated forms.</li> <li>The Developer Guide lays out some basic principles and   guidelines we use in developing RDycore.</li> </ul>"},{"location":"index.html#acknowledgements","title":"Acknowledgements","text":"<p>RDycore is funded by the US Department of Energy's (DOE) Scientific Discovery Through Advanced Computing (SciDAC) program through a joint parternship between the DOE Office of Science's Biological and Environmental Research and Advanced Scientific Computing Research programs.</p>"},{"location":"installation.html","title":"Installation","text":"<p>RDycore builds and runs on the following platforms:</p> <ul> <li>Linux and Mac laptops and workstations</li> <li>Frontier (Oak Ridge National Laboratory)</li> <li>Perlmutter (NERSC)</li> </ul>"},{"location":"installation.html#required-software","title":"Required Software","text":"<p>To build RDycore, you need:</p> <ul> <li>CMake v3.14+</li> <li>GNU Make</li> <li>reliable C, C++, and Fortran compilers</li> <li>a working MPI installation (like OpenMPI   or MPICH)</li> <li>PETSc (Git revision <code>b3128c15e0e</code>), built with   the following third-party libraries:<ul> <li>cgns</li> <li>exodusii</li> <li>fblaslapack</li> <li>hdf5</li> <li>libceed</li> <li>metis</li> <li>netcdf</li> <li>parmetis</li> <li>pnetcdf</li> <li>zlib</li> </ul> </li> </ul> <p>You can obtain all of these freely on the Linux and Mac platforms. On Linux, just use your favorite package manager. On a Mac, you can get the Clang C/C++ compiler by installing XCode, and then use a package manager like Homebrew or MacPorts to get the rest.</p>"},{"location":"installation.html#clone-the-repository","title":"Clone the Repository","text":"<p>First, go get the source code at GitHub:</p> SSHHTTPS <pre><code>git clone git@github.com:RDycore/RDycore.git\n</code></pre> <pre><code>git clone https://github.com/RDycore/RDycore.git\n</code></pre> <p>This places an <code>RDycore</code> folder into your current path.</p>"},{"location":"installation.html#configure-rdycore","title":"Configure RDycore","text":"<p>RDycore uses CMake, and can be easily configured as long as PETSc is installed and the <code>PETSC_DIR</code> and <code>PETSC_ARCH</code> environment variables are set properly. Usually all you need to do is change to your <code>RDycore</code> source directory and type</p> <pre><code>cmake -S . -B build\n</code></pre> <p>where <code>build</code> is the name of your build directory relative to the source directory. If you want to install RDycore somewhere afterward, e.g. to be able to configure E3SM to use it, you can set the prefix for the installation path using the <code>CMAKE_INSTALL_PREFIX</code> parameter:</p> <pre><code>cmake -S . -B build -DCMAKE_INSTALL_PREFIX=/path/to/install\n</code></pre>"},{"location":"installation.html#build-test-and-install-rdycore","title":"Build, Test, and Install RDycore","text":"<p>After you've configured RDycore, you can build it:</p> <ol> <li>From the build directory, type <code>make -j</code> to build the library.</li> <li>To run tests for the library (and the included drivers), type    <code>make test</code>.</li> <li>To install the model to the location (indicated by your <code>CMAKE_INSTALL_PREFIX</code>,    if you specified it), type <code>make install</code>. By default, products are installed    in the <code>include</code>, <code>lib</code>, <code>bin</code>, and <code>share</code> subdirectories of this prefix.</li> </ol>"},{"location":"installation.html#making-code-changes-and-rebuilding","title":"Making code changes and rebuilding","text":"<p>Notice that you must build RDycore in a  build tree, separate from its source trees. This is standard practice in CMake-based build systems, and it allows you to build several different configurations without leaving generated and compiled files all over your source directory. However, you might have to change the way you work in order to be productive in this kind of environment.</p> <p>When you make a code change, make sure you build from the build directory that you created in step 1 above:</p> <pre><code>cd /path/to/RDycore/build\nmake -j\n</code></pre> <p>You can also run tests from this build directory with <code>make test</code>.</p> <p>This is very different from how some people like to work. One method of making this easier is to use an editor in a dedicated window, and have another window open with a terminal, sitting in your <code>build</code> directory. If you're using a fancy modern editor, it might have a CMake-based workflow that handles all of this for you.</p> <p>The build directory has a structure that mirrors the source directory, and you can type <code>make</code> in any one of its subdirectories to do partial builds. In practice, though, it's safest to always build from the top of the build tree.</p>"},{"location":"developer/index.html","title":"RDycore Developer Guide","text":"<p>More to come!</p>"},{"location":"user/index.html","title":"RDycore User Guide","text":"<ul> <li>YAML input specification</li> </ul> <p>More soon!</p>"},{"location":"user/input.html","title":"RDycore YAML Input Specification","text":"<p>You can configure an RDycore simulation by creating a text file that uses the YAML markup language. Typically, these files have a <code>.yml</code> or <code>.yaml</code> suffix like <code>dam-break.yaml</code>. In this section, we describe how to express the specifics for your simulation using the YAML syntax.</p> <p>RDycore's YAML input is broken up into several sections, each responsible for a different aspect of the desired simulation. These sections fall into several broad categories:</p> <ul> <li>Model equations and discretizations<ul> <li>physics: configures the different physical models   represented within RDycore</li> <li>numerics: specifies the numerical methods used   to solve the model equations</li> </ul> </li> <li>Simulation diagnostics, output, and restarts<ul> <li>logging: controls informational messages logged to   files or to the terminal</li> <li>output: configures simulation output, including   scalable I/O formats and related parameters</li> </ul> </li> <li>Material properties<ul> <li>materials: defines the materials available to   the simulation</li> <li>surface_composition: associates   materials defined in the <code>materials</code> section with files in which the   relevant material properties are stored</li> </ul> </li> <li>Spatial discretization<ul> <li>grid: controls RDycore's spatial discretization</li> <li>regions: associates regions (disjoint sets of cells)   defined in a grid file with human-readable names</li> <li>boundaries: associates boundaries (disjoint sets of   edges) defined in a grid file with human-readable names</li> </ul> </li> <li>Initial and boundary conditions, source terms<ul> <li>initial_conditions: associates initial   conditions (as defined in <code>flow_conditions</code>, <code>sediment_conditions</code>, and/or   <code>salinity_conditions</code>) with specific regions defined in the <code>regions</code>   section</li> <li>sources: associates source contributions   (as defined in <code>flow_conditions</code>, <code>sediment_conditions</code>, and/or   <code>salinity_conditions</code>) with specific regions defined in the <code>regions</code>   section</li> <li>boundary_conditions: associates boundary   conditions (as defined in <code>flow_conditions</code>, <code>sediment_conditions</code>, and/or   <code>salinity_conditions</code>) with specific boundaries defined in the   <code>boundaries</code> section</li> <li>flow_conditions: defines flow-related   parameters that can be used to specify initial/boundary conditions and   sources</li> <li>sediment_conditions: defines sediment-related   parameters that can be used to specify initial/boundary conditions and   sources</li> <li>salinity_conditions: defines salinity-related   parameters that can be used to specify initial/boundary conditions and   sources</li> </ul> </li> </ul> <p>Each of these sections is described below, with a motivating example.</p>"},{"location":"user/input.html#boundaries","title":"<code>boundaries</code>","text":"<pre><code>[boundaries]\n  - name: top_wall\n    mesh_boundary_id: 2\n  - name: bottom_wall\n    mesh_boundary_id: 3\n  - name: exterior\n    mesh_boundary_id: 1\n</code></pre> <p>The <code>boundaries</code> section is a sequence (list) of boundary definitions, each of which contains the following fields:</p> <ul> <li><code>name</code>: a human-readable name for the boundary</li> <li><code>grid_boundary_id</code>: an integer identifier associated with a disjoint set of   grid edges. If this identifier is not found within the grid file specified   in the <code>grid</code> section, a fatal error occurs.</li> </ul> <p>Boundary definitions can appear in any order within the sequence.</p>"},{"location":"user/input.html#boundary_conditions","title":"<code>boundary_conditions</code>","text":""},{"location":"user/input.html#flow_conditions","title":"<code>flow_conditions</code>","text":""},{"location":"user/input.html#grid","title":"<code>grid</code>","text":""},{"location":"user/input.html#logging","title":"<code>logging</code>","text":""},{"location":"user/input.html#materials","title":"<code>materials</code>","text":""},{"location":"user/input.html#numerics","title":"<code>numerics</code>","text":""},{"location":"user/input.html#output","title":"<code>output</code>","text":""},{"location":"user/input.html#physics","title":"<code>physics</code>","text":""},{"location":"user/input.html#regions","title":"<code>regions</code>","text":"<pre><code>[regions]\n  - name: upstream\n    grid_region_id: 2\n  - name: downstream\n    grid_region_id: 1\n</code></pre> <p>The <code>regions</code> section is a sequence (list) of regions definitions, each of which contains the following fields:</p> <ul> <li><code>name</code>: a human-readable name for the boundary</li> <li><code>grid_region_id</code>: an integer identifier associated with a disjoint set of   grid cells. If this identifier is not found within the grid file specified   in the <code>grid</code> section, a fatal error occurs.</li> </ul> <p>Region definitions can appear in any order within the sequence.</p>"},{"location":"user/input.html#initial_conditions","title":"<code>initial_conditions</code>","text":""},{"location":"user/input.html#salinity_conditions","title":"<code>salinity_conditions</code>","text":""},{"location":"user/input.html#sediment_conditions","title":"<code>sediment_conditions</code>","text":""},{"location":"user/input.html#sources","title":"<code>sources</code>","text":""},{"location":"user/input.html#surface_composition","title":"<code>surface_composition</code>","text":""}]}