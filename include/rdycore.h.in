// RDycore -- a compound flooding dynamics simulator

#ifndef RDYCORE_H
#define RDYCORE_H

#include <petsc.h>

//---------------------
// Version Information
//---------------------

#define RDYCORE_MAJOR_VERSION @RDYCORE_MAJOR_VERSION@
#define RDYCORE_MINOR_VERSION @RDYCORE_MINOR_VERSION@
#define RDYCORE_PATCH_VERSION @RDYCORE_PATCH_VERSION@

//--------------------
// Configuration Info
//--------------------

// this expands to "int32" or "int64", depending on whether PETSc was configured
// with 64-bit indices
#define PETSC_ID_TYPE "@PETSC_ID_TYPE@"

//-------------------
// RDycore Interface
//-------------------

typedef struct _p_RDy *RDy;

// Process initialization
PETSC_EXTERN PetscErrorCode RDyInit(int, char*[], const char*);
PETSC_EXTERN PetscErrorCode RDyInitFortran(void);
PETSC_EXTERN PetscErrorCode RDyOnFinalize(void (*)(void));
PETSC_EXTERN PetscErrorCode RDyFinalize(void);
PETSC_EXTERN PetscBool RDyInitialized(void);

// RDycore online configuration
PETSC_EXTERN PetscErrorCode RDySetLogFile(RDy, const char*);

// RDycore setup/breakdown
PETSC_EXTERN PetscErrorCode RDyCreate(MPI_Comm, const char*, RDy*);
PETSC_EXTERN PetscErrorCode RDySetup(RDy);
PETSC_EXTERN PetscErrorCode RDyDestroy(RDy*);

// time integration
PETSC_EXTERN PetscErrorCode RDyAdvance(RDy);

// Accessing data
PETSC_EXTERN PetscBool      RDyFinished(RDy);

PETSC_EXTERN PetscErrorCode RDyGetTime(RDy, PetscReal*);
PETSC_EXTERN PetscErrorCode RDyGetTimeStep(RDy, PetscReal*);
PETSC_EXTERN PetscErrorCode RDyGetStep(RDy, PetscInt*);
PETSC_EXTERN PetscErrorCode RDyGetCouplingInterval(RDy, PetscReal*);

PETSC_EXTERN PetscErrorCode RDyGetNumLocalCells(RDy, PetscInt*);
PETSC_EXTERN PetscErrorCode RDyGetNumBoundaryConditions(RDy, PetscInt*);
PETSC_EXTERN PetscErrorCode RDyGetNumBoundaryEdges(RDy, const PetscInt, PetscInt*);
PETSC_EXTERN PetscErrorCode RDyGetBoundaryConditionFlowType(RDy, const PetscInt, PetscInt*);

PETSC_EXTERN PetscErrorCode RDyGetHeightOfLocalCell(RDy, const PetscInt, PetscReal*);
PETSC_EXTERN PetscErrorCode RDyGetXMomentumOfLocalCell(RDy, const PetscInt, PetscReal*);
PETSC_EXTERN PetscErrorCode RDyGetYMomentumOfLocalCell(RDy, const PetscInt, PetscReal*);

PETSC_EXTERN PetscErrorCode RDyGetXCentroidOfLocalCell(RDy, const PetscInt, PetscReal*);
PETSC_EXTERN PetscErrorCode RDyGetYCentroidOfLocalCell(RDy, const PetscInt, PetscReal*);
PETSC_EXTERN PetscErrorCode RDyGetZCentroidOfLocalCell(RDy, const PetscInt, PetscReal*);
PETSC_EXTERN PetscErrorCode RDyGetNatIDOfLocalCell(RDy, const PetscInt, PetscInt*);

PETSC_EXTERN PetscErrorCode RDyGetXCentroidOfBoundaryEdge(RDy, const PetscInt, const PetscInt, PetscReal*);
PETSC_EXTERN PetscErrorCode RDyGetYCentroidOfBoundaryEdge(RDy, const PetscInt, const PetscInt, PetscReal*);
PETSC_EXTERN PetscErrorCode RDyGetZCentroidOfBoundaryEdge(RDy, const PetscInt, const PetscInt, PetscReal*);
PETSC_EXTERN PetscErrorCode RDyGetXCentroidOfBoundaryCell(RDy, const PetscInt, const PetscInt, PetscReal*);
PETSC_EXTERN PetscErrorCode RDyGetYCentroidOfBoundaryCell(RDy, const PetscInt, const PetscInt, PetscReal*);
PETSC_EXTERN PetscErrorCode RDyGetZCentroidOfBoundaryCell(RDy, const PetscInt, const PetscInt, PetscReal*);

PETSC_EXTERN PetscErrorCode RDyGetNaturalIDOfBoundaryCell(RDy, const PetscInt, const PetscInt, PetscInt*);

PETSC_EXTERN PetscErrorCode RDySetCouplingInterval(RDy, PetscReal);

PETSC_EXTERN PetscErrorCode RDySetDirichletBoundaryValues(RDy, const PetscInt, const PetscInt, const PetscInt, PetscReal*);
PETSC_EXTERN PetscErrorCode RDySetWaterSourceForLocalCell(RDy, const PetscInt, PetscReal*);
PETSC_EXTERN PetscErrorCode RDySetXMomentumSourceForLocalCell(RDy, const PetscInt, PetscReal*);
PETSC_EXTERN PetscErrorCode RDySetYMomentumSourceForLocalCell(RDy, const PetscInt, PetscReal*);
PETSC_EXTERN PetscErrorCode RDySetManningsNForLocalCell(RDy, const PetscInt, PetscReal*);

// "kinds" of initial/boundary/source conditions applied to regions/boundaries
typedef enum {
  CONDITION_DIRICHLET = 0,    // Dirichlet condition (value is specified)
  CONDITION_NEUMANN,          // Neumann condition (derivative is specified)
  CONDITION_REFLECTING,       // Reflecting condition
  CONDITION_CRITICAL_OUTFLOW  // Critical flow
} RDyConditionType;

#endif
